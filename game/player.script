local input = require "ludobits.m.input"
local kinematic = require "ludobits.m.kinematic"

local CAMERA_OFFSET = vmath.vector3(-80, -77, 0)

local LEFT = hash("left")
local RIGHT = hash("right")

local MAX_SPEED = 200
local MIN_SPEED = 50
local ROTATION_ACCELERATION = 80
local MAX_ROTATION_SPEED = 300
local DECELERATION = 50	-- when turning
local ACCELERATION = 75
local GRAVITY = vmath.vector3(0, -10, 0)

function init(self)
	input.acquire()
	self.direction = vmath.vector3()
	self.speed = 50
	self.rotation_speed = 0
	self.acceleration = 0
	self.angle = 0
	self.camera_offset = vmath.vector3()
end

function final(self)
	input.release()
end

function update(self, dt)
	local pos = go.get_position()
	
	if input.is_pressed(LEFT) then
		if self.rotation_speed < 0 then
			self.rotation_speed = -self.rotation_speed
		end
		self.rotation_speed = math.min(self.rotation_speed + ROTATION_ACCELERATION * dt, MAX_ROTATION_SPEED)
		self.speed = math.max(self.speed - DECELERATION * dt, MIN_SPEED)
	elseif input.is_pressed(RIGHT) then
		if self.rotation_speed > 0 then
			self.rotation_speed = -self.rotation_speed
		end
		self.rotation_speed = math.max(self.rotation_speed - ROTATION_ACCELERATION * dt, -MAX_ROTATION_SPEED)
		self.speed = math.max(self.speed - DECELERATION *dt, MIN_SPEED)
	else
		self.rotation_speed = self.rotation_speed * 0.9
		self.speed = math.min(self.speed + ACCELERATION *dt, MAX_SPEED)
	end
	
	self.angle = self.angle + self.rotation_speed * dt
	
	local rad = math.rad(self.angle)
	local pos = go.get_position()
	local distance = self.speed * dt
	pos = pos + vmath.vector3(-math.sin(rad) * distance, math.cos(rad) * distance, 0)
	local grav = vmath.vector3(0, -(MAX_SPEED * 1.2 - self.speed) * 0.2, 0)
	pos = pos + grav * dt
	pos = pos + GRAVITY * dt
	
	
	go.set_rotation(vmath.quat_axis_angle(vmath.vector3(0, 0, 1), rad))
	go.set_position(pos)
	
	
	local target_offset = vmath.vector3(-math.sin(rad) * distance, math.cos(rad) * distance, 0) * 15
	self.camera_offset = self.camera_offset + (target_offset - self.camera_offset) * dt
	go.set_position(pos + self.camera_offset + CAMERA_OFFSET, "camera")
end

function on_message(self, message_id, message, sender)
    -- Add message-handling code here
    -- Remove this function if not needed
end

function on_input(self, action_id, action)
	input.on_input(action_id, action)
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end

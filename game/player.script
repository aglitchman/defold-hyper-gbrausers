local input = require "ludobits.m.input"
local kinematic = require "ludobits.m.kinematic"
local broadcast = require "ludobits.m.broadcast"

local CAMERA_OFFSET = vmath.vector3(-80, -77, 0)

local COLLISION_RESPONSE = hash("collision_response")
local GROUP_GROUND = hash("ground")
local GROUP_ENEMYBULLET = hash("enemybullet")


local LEFT = hash("left")
local RIGHT = hash("right")
local FIRE = hash("fire")

local MAX_HEIGHT = 400
local MAX_SPEED = 200
local MAX_BULLET_SPEED = 300
local MIN_SPEED = 50
local ROTATION_ACCELERATION = 380
local MAX_ROTATION_SPEED = 300
local DECELERATION = 50	-- when turning
local ACCELERATION = 175
local GRAVITY = vmath.vector3(0, -10, 0)
local RATE_OF_FIRE = 0.15



local function take_damage(self, amount)
	self.health = self.health - amount
	if self.health <= 0 then
		broadcast.send("player_death")
	else
		broadcast.send("update_health", { health = self.health })
	end
end


function init(self)
	print(msg.url())
	input.acquire()
	self.direction = vmath.vector3()
	self.speed = MAX_SPEED
	self.rotation_speed = 0
	self.acceleration = 0
	self.angle = 0
	self.camera_offset = vmath.vector3()
	self.fire_timeout = 0
	self.health = 10
	self.score = 0
	broadcast.send("update_health", { health = self.health })
	broadcast.send("update_score", { score = self.score })
	broadcast.register("enemyplane_death", function()
		self.score = self.score + 100
		broadcast.send("update_score", { score = self.score })
	end)
end

function final(self)
	input.release()
	broadcast.unregister("enemyplane_death")
end

function update(self, dt)
	local pos = go.get_position()
	
	if self.stalling then
		self.angle = self.angle + (180 - self.angle) * 0.9 * dt
		self.speed = math.max(self.speed - 2 * DECELERATION * dt, MIN_SPEED)
		if pos.y < MAX_HEIGHT * 0.75 then
			self.stalling = false
			broadcast.send("not_stalling")
		end
	end
	
	if not self.stalling then
		if input.is_pressed(LEFT) then
			if self.rotation_speed < 0 then
				self.rotation_speed = -self.rotation_speed
			end
			self.rotation_speed = math.min(self.rotation_speed + ROTATION_ACCELERATION * dt, MAX_ROTATION_SPEED)
			self.speed = math.max(self.speed - DECELERATION * dt, MIN_SPEED)
		elseif input.is_pressed(RIGHT) then
			if self.rotation_speed > 0 then
				self.rotation_speed = -self.rotation_speed
			end
			self.rotation_speed = math.max(self.rotation_speed - ROTATION_ACCELERATION * dt, -MAX_ROTATION_SPEED)
			self.speed = math.max(self.speed - DECELERATION *dt, MIN_SPEED)
		else
			self.rotation_speed = self.rotation_speed * 0.9
			self.speed = math.min(self.speed + ACCELERATION *dt, MAX_SPEED)
		end
	end
	
	if input.is_pressed(FIRE) then
		self.fire_timeout = self.fire_timeout - dt
		if self.fire_timeout <= 0 then
			factory.create("#bulletfactory", go.get_world_position(), go.get_rotation(), { speed = MAX_BULLET_SPEED, angle = self.angle })
			self.fire_timeout = RATE_OF_FIRE
		end
	else
		self.fire_timeout = 0
	end
	
	self.angle = (self.angle + self.rotation_speed * dt) % 360
	
	local rad = math.rad(self.angle)
	local distance = self.speed * dt
	kinematic.forward(rad, distance)

	local pos = go.get_position()
	local grav = vmath.vector3(0, -(MAX_SPEED * 1.2 - self.speed) * 0.2, 0)
	pos = pos + grav * dt
	pos = pos + GRAVITY * dt
	
	if pos.y > MAX_HEIGHT then
		self.stalling = true
		broadcast.send("stalling")
	end
	

	go.set_rotation(vmath.quat_axis_angle(vmath.vector3(0, 0, 1), rad))
	go.set_position(pos)
	
	
	-- adjust camera
	local target_offset = vmath.vector3(-math.sin(rad) * distance, math.cos(rad) * distance, 0) * 15
	self.camera_offset = self.camera_offset + (target_offset - self.camera_offset) * dt
	go.set_position(pos + self.camera_offset + CAMERA_OFFSET, "camera")
end

function on_message(self, message_id, message, sender)
	broadcast.on_message(message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		if message.group == GROUP_GROUND then
			take_damage(self, self.health)
		elseif message.group == GROUP_ENEMYBULLET then
			take_damage(self, 1)
			go.delete(message.other_id)
		end
	end
end

function on_input(self, action_id, action)
	input.on_input(action_id, action)
end

function on_reload(self)
end
